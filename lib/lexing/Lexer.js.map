{"version":3,"file":"Lexer.js","sourceRoot":"","sources":["../../src/lexing/Lexer.ts"],"names":[],"mappings":"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","sourcesContent":["const fs = require('fs');\n\nimport KEYWORDS from './util/Keywords';\nimport SYMBOLS from './util/Symbols';\n\nimport Tag from './util/Tag';\nimport Token from './util/Token';\n\n\nexport default class Lexer {\n\tprivate fileContents: string;\n\tprivate characterIndex: number = -1;\n\tprivate currentCharacter: string = null;\n\n\tconstructor(fileName: string) {\n\t\tthis.fileContents = fs.readFileSync(fileName, 'utf8');\n\t}\n\n\tpeek(): void {\n\t\tthis.skipAndPeek(0);\n\t}\n\n\tskipAndPeek(skipLength: number): void {\n\t\tif (this.characterIndex + 1 + skipLength > this.fileContents.length - 1) {\n\t\t\tthis.currentCharacter = null;\n\t\t} else {\n\t\t\tthis.currentCharacter = this.fileContents[this.characterIndex + 1 + skipLength];\n\t\t\tthis.characterIndex += 1;\n\t\t}\n\t}\n\n\tpreview(length: number): string | null {\n\t\tif (this.characterIndex + 1 > this.fileContents.length - 1) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn this.fileContents.substr(this.characterIndex + 1, length);\n\t\t}\n\t}\n\n\tnextToken(): Token {\n\t\tlet token: Token = null;\n\t\tthis.peek();\n\n\t\twhile (!token) {\n\t\t\tif (this.currentCharacter === null) {\n\t\t\t\ttoken = new Token(Tag.EOF);\n\t\t\t}\n\n\t\t\telse if (Lexer.isLineEnding(this.currentCharacter)) {\n\t\t\t\tthis.peek();\n\t\t\t}\n\n\t\t\telse if (Lexer.isWhiteSpace(this.currentCharacter)) {\n\t\t\t\tthis.peek();\n\t\t\t}\n\n\t\t\telse if (SYMBOLS[this.currentCharacter + this.preview(1)]) {\n\t\t\t\ttoken = new Token(SYMBOLS[this.currentCharacter + this.preview(1)]);\n\t\t\t}\n\t\t\telse if (SYMBOLS[this.currentCharacter]) {\n\t\t\t\ttoken = new Token(SYMBOLS[this.currentCharacter]);\n\t\t\t}\n\n\n\t\t\telse if (Lexer.isDigit(this.currentCharacter)) {\n\t\t\t\tlet value: number = 0;\n\n\t\t\t\twhile (Lexer.isDigit(this.currentCharacter)) {\n\t\t\t\t\tvalue = value * 10 + parseInt(this.currentCharacter, 10);\n\t\t\t\t\tthis.peek();\n\t\t\t\t}\n\t\t\t\ttoken = new Token(Tag.NUMBER, value);\n\t\t\t}\n\n\t\t\telse if (Lexer.isLetter(this.currentCharacter)) {\n\t\t\t\tlet word = '';\n\n\t\t\t\twhile(Lexer.isLetter(this.currentCharacter)) {\n\t\t\t\t\tword += this.currentCharacter;\n\t\t\t\t\tthis.peek();\n\t\t\t\t}\n\n\t\t\t\tif (KEYWORDS[word]) {\n\t\t\t\t\ttoken = new Token(KEYWORDS[word]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttoken = new Token(Tag.ID, word);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Unsupported character: '${this.currentCharacter}'`);\n\t\t\t}\n\t\t}\n\t\treturn token;\n\t}\n\n\n\tstatic isWhiteSpace(character): boolean {\n\t\tlet charCode: number = character.charCodeAt(0);\n\n\t\t// tab code is 9\n\t\t// space code is 32\n\t\treturn charCode === 9 || charCode === 32;\n\t}\n\n\tstatic isLineEnding(character): boolean {\n\t\tlet charCode: number = character.charCodeAt(0);\n\n\t\treturn charCode === 10;\n\t}\n\n\tstatic isDigit(character): boolean {\n\t\tif (character === null) {\n\t\t\treturn false;\n\t\t}\n\t\tlet charCode = character.charCodeAt(0);\n\n\t\treturn (charCode >= 48 && charCode <= 57); // 0-9\n\t}\n\n\tstatic isLetter(character): boolean {\n\t\tif (character === null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn character.match(/[a-z]/i);\n\t}\n\n\n\tstatic getTokens(fileName: string) {\n\n\n\n\t}\n\n}"]}